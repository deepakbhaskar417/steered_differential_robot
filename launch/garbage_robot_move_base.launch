<launch>

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames -->
 <!--<node pkg="tf" type="static_transform_publisher" name="world_to_map" args="0 0 0 0 0 0 world map 10"/>
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 10"/>
   <node pkg="tf" type="static_transform_publisher" name="odom_to_base_footprint" args="0 0 0 0 0 0 odom base_footprint 50"/>
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.0 0 0 0 base_footprint base_link 50" /> -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0.9 0 0.195 0 0 0 base_footprint base_link 50" />
  <!-- Launch RViz -->
  <include file="$(find garbage_robot_description)/launch/display.launch">
     <arg name="model" value="$(find garbage_robot_description)/urdf/garbage_robot.xacro"/>
     <arg name="rvizconfig" value="$(find garbage_robot_description)/launch/urdf.rviz"/>
  </include>
  
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="/odom" /> <!--/base_truth_odom"-->
  <!--<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="50.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="false"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>
-->
  <!-- Map File -->
  <arg name="map_file" default="$(find garbage_robot_description)/maps/test.yaml"/>
	
  <!-- Map Server -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <include file="$(find amcl)/examples/amcl_diff.launch"/>  
	
  <!-- Move Base Node -->
  <!-- Subscribe: /tf, /map, /scan, /odom, /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->

  <remap from="cmd_vel" to="/cmd_vel"/>
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find garbage_robot_description)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find garbage_robot_description)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find garbage_robot_description)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find garbage_robot_description)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find garbage_robot_description)/param/base_local_planner_params.yaml" command="load" />
      <!-- Here we load our costmap conversion settings -->
     <param name="TebLocalPlannerROS/include_costmap_obstacles" value="False" />
      <param name="TebLocalPlannerROS/include_dynamic_obstacles" value="True" />
      <param name="base_global_planner" value="navfn/NavfnROS" />
      <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
      <param name="controller_frequency" value="5.0" />
      <param name="controller_patience" value="15.0" />
      <remap from="map" to="/map"/>
  <!-- not sure whether needed or not. added to avoid in-place rotation-->
    <param name="clearing_roatation_allowed" value="false"/> <!-- Our carlike robot is not able to rotate in place -->
    
  </node>

</launch>

